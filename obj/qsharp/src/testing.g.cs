//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"program\",\"Name\":\"oracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\chris\\\\Git-Repos\\\\Bloch Beavers Least Squared Solver\\\\.testing\\\\testing.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":18},\"Item2\":{\"Line\":1,\"Column\":26}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"cArg\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":56}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"program\",\"Name\":\"oracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\chris\\\\Git-Repos\\\\Bloch Beavers Least Squared Solver\\\\.testing\\\\testing.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"program\",\"Name\":\"MainOp\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":18,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\chris\\\\Git-Repos\\\\Bloch Beavers Least Squared Solver\\\\.testing\\\\testing.qs\",\"Position\":{\"Item1\":19,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"program\",\"Name\":\"MainOp\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\chris\\\\Git-Repos\\\\Bloch Beavers Least Squared Solver\\\\.testing\\\\testing.qs\",\"Position\":{\"Item1\":19,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
#line hidden
namespace program
{
    [SourceLocation("C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs", OperationFunctor.Body, 11, 20)]
    public partial class oracle : Operation<(IQArray<Qubit>,Int64,Qubit), QVoid>, ICallable
    {
        public oracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,Int64,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,Int64,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "oracle";
        String ICallable.FullName => "program.oracle";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,Int64,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (register,cArg,target) = __in__;
#line 12 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((register, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,Int64,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register, Int64 cArg, Qubit target)
        {
            return __m__.Run<oracle, (IQArray<Qubit>,Int64,Qubit), QVoid>((register, cArg, target));
        }
    }

    [SourceLocation("C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs", OperationFunctor.Body, 20, -1)]
    public partial class MainOp : Operation<QVoid, IQArray<Int64>>, ICallable
    {
        public MainOp(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "MainOp";
        String ICallable.FullName => "program.MainOp";
        public static EntryPointInfo<QVoid, IQArray<Int64>> Info => new EntryPointInfo<QVoid, IQArray<Int64>>(typeof(MainOp));
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Lg
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,Int64,Qubit), QVoid> oracle__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit,Qubit)> CCNOT__
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, Int64> Microsoft__Quantum__Convert__ResultArrayAsInt
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        public override Func<QVoid, IQArray<Int64>> __Body__ => (__in__) =>
        {
#line 21 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
            var product = 15L;
#line 22 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
            var n = Microsoft__Quantum__Math__Ceiling.Apply((0.5D * Microsoft__Quantum__Math__Lg.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(product))));
#line 23 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
            Message__.Apply(String.Format("n: {0}", n));
#line 25 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
            var result = new QArray<Int64>();
#line 26 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
            foreach (var results in new QRange(0L, 10L))
#line hidden
            {
#line hidden
                {
#line 28 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                    var q = Allocate__.Apply((2L * n));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 29 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, q));
#line 30 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                        foreach (var iterations in new QRange(0L, 100L))
#line hidden
                        {
#line hidden
                            {
#line 31 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                var t = Allocate__.Apply();
#line hidden
                                bool __arg2__ = true;
                                try
                                {
#line 32 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                    oracle__.Apply((q, product, t));
#line 33 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                    Microsoft__Quantum__Intrinsic__X.Apply(t);
#line hidden
                                    {
#line 34 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                        var temp = Allocate__.Apply((2L * n));
#line hidden
                                        bool __arg3__ = true;
                                        try
                                        {
#line 35 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                            foreach (var i in new QRange(0L, ((2L * n) - 1L)))
#line hidden
                                            {
#line 36 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                                Microsoft__Quantum__Intrinsic__CNOT.Apply((q[i], temp[i]));
#line 37 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                                CCNOT__.Apply((t, temp[i], q[i]));
                                            }

#line 39 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                            Reset__.Apply(t);
#line 40 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                            ResetAll__.Apply(temp);
#line hidden
                                            {
#line 42 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                                var r = Allocate__.Apply();
#line hidden
                                                bool __arg4__ = true;
                                                try
                                                {
#line 43 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__X, q));
#line 44 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                                    Microsoft__Quantum__Intrinsic__X.Controlled.Apply((q, r));
#line 45 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__X, q));
#line 46 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                                    foreach (var i in new QRange(0L, ((2L * n) - 1L)))
#line hidden
                                                    {
#line 47 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                                        Microsoft__Quantum__Intrinsic__H.Controlled.Apply((new QArray<Qubit>(r), q[i]));
                                                    }

#line 49 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                                                    Reset__.Apply(r);
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg4__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg4__)
                                                    {
#line hidden
                                                        Release__.Apply(r);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg3__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg3__)
                                            {
#line hidden
                                                Release__.Apply(temp);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg2__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg2__)
                                    {
#line hidden
                                        Release__.Apply(t);
                                    }
                                }
                            }
                        }

#line 51 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
                        result = QArray<Int64>.Add(result, new QArray<Int64>(Microsoft__Quantum__Convert__ResultArrayAsInt.Apply(Microsoft__Quantum__Measurement__MultiM.Apply(q))));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(q);
                        }
                    }
                }
            }

#line 53 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\.testing\\testing.qs"
            return result;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Math__Lg = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Lg));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.oracle__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,Int64,Qubit), QVoid>>(typeof(oracle));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.CCNOT__ = this.__Factory__.Get<IUnitary<(Qubit,Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CCNOT));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.Microsoft__Quantum__Convert__ResultArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Result>, Int64>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsInt));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__)
        {
            return __m__.Run<MainOp, QVoid, IQArray<Int64>>(QVoid.Instance);
        }
    }
}