//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Least.Squares.Solver\",\"Name\":\"MainOp\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":72,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\"TODO:\",\"Encode Vectors/Arrays as Amplitudes (For A, b, and similar (A~. and B~))\",\"Make the HHL operation\",\"Make the QPE/QAE operation\",\"Use HHL and QAE to make QsolX\",\"Use HHL and QAE and QsolX to make QsolR\",\"Use QAE to make norm of X\",\"Use QAE to make norm of R\",\"Make the f(x) = log(norm(R))^2 + log(norm(X))^2 operation\",\"Make the QMF algorithm\",\"\",\"Specifics of every operation we need to implement:\",\"\",\"Encode Vectors/Arrays as Amplitudes\",\"Inputs: datapoints (a classical set of (x, y) points), mu (a binary qubit register representing the mu value), width (a classical value to tell you the degree of the polynomial)\",\"Outputs: a qubit register with A~ encoded into the amplitudes, a qubit register with b~ encoded into the amplitudes\",\"Example:\",\"Given datapoints (0, 1), (2, 3), (5, 3), (7, 1), a mu of 1, and a width of 4\",\"b is the y values: [1, 3, 3, 1]\",\"A is the x values to the degree of the polynomial:\",\"|0^3, 0^2, 0^1, 0^0|   |0,   0,  0, 1|\",\"|2^3, 2^2, 2^1, 2^0|   |8,   4,  2, 1|\",\"|5^3, 5^2, 5^1, 5^0| = |125, 25, 5, 1|\",\"|7^3, 7^2, 7^1, 7^0|   |343, 49, 7, 1|\",\"\",\"Append 0s to the bottom of b to get b~:\",\"[1, 3, 3, 1, 0, 0, 0, 0]\",\"\",\"Append mu * I (the identity matrix) to the bottom of A in order to get A~:\",\"|0,   0,  0, 1|\",\"|8,   4,  2, 1|\",\"|125, 25, 5, 1|\",\"|343, 49, 7, 1|\",\"|1,   0,  0, 0|\",\"|0,   1,  0, 0|\",\"|0,   0,  1, 0|\",\"|0,   0,  0, 1|\",\"\",\"Next, normalize the vector b~ (size of 1) and encode it as the magnitudes of a (in this case) 3-qubit register:\",\"1/whatever * (1|000> + 3|001> + 3|010> + 1|011> + 0|100> + 0|101> + 0|110> + 0|111>)\",\"\",\"Next, do the same for every column of A, and store it as a list of column vectors (Qubit[column index][row index]). (NOTE: it may actually be stores as a list of row vectors, so Qubit[row index][column index]. I don't really know, but be prepared to change it if that is the case.)\",\"\",\"Return a tuple of (b~, A~)\",\"\",\"\",\"Make the HHL Operation\",\"I'm still a bit unsure of the specific details\",\"\",\"\",\"Make the QAE Operation\",\"Inputs: Qubit register, index\"],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\chris\\\\Git-Repos\\\\Bloch Beavers Least Squared Solver\\\\main.qs\",\"Position\":{\"Item1\":73,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Least.Squares.Solver\",\"Name\":\"MainOp\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\chris\\\\Git-Repos\\\\Bloch Beavers Least Squared Solver\\\\main.qs\",\"Position\":{\"Item1\":73,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
#line hidden
namespace Least.Squares.Solver
{
    [SourceLocation("C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\main.qs", OperationFunctor.Body, 74, -1)]
    public partial class MainOp : Operation<QVoid, IQArray<Result>>, ICallable
    {
        public MainOp(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "MainOp";
        String ICallable.FullName => "Least.Squares.Solver.MainOp";
        public static EntryPointInfo<QVoid, IQArray<Result>> Info => new EntryPointInfo<QVoid, IQArray<Result>>(typeof(MainOp));
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        public override Func<QVoid, IQArray<Result>> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 76 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\main.qs"
                var q = Allocate__.Apply(4L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 77 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\main.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, q));
#line 78 "C:\\Users\\chris\\Git-Repos\\Bloch Beavers Least Squared Solver\\main.qs"
                    return Microsoft__Quantum__Measurement__MultiM.Apply(q);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(q);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(IQArray<Result> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Result>> Run(IOperationFactory __m__)
        {
            return __m__.Run<MainOp, QVoid, IQArray<Result>>(QVoid.Instance);
        }
    }
}